<html>
  <head>
        <link rel="stylesheet" href="https://unpkg.com/ress/dist/ress.min.css">
        <%= stylesheet_link_tag "java", :media => "all" %>
    </head>
  <body>
    <p class="title">Javaの学習記録</p>
    <p class="title2">Javaとは</p>
    <p class="text">Javaの特徴①コンパイル言語である。Rubyはスクリプト言語というもの。
    <br>②プラットフォーム非依存。どんな環境でも動くプログラム
    <br>③オブジェクト指向。保守性が高く、拡張性もある。</p>

    <p class="title2">Javaのプログラム実行準備</p>
    <p class="text">①環境変数の設定　コントロールパネル→システムの詳細設定→環境変数から変更
    <br>新しいシステム変数の作成で「JAVA_HOME」変数値「C:\Program Files\Java\jdk1.8.0_311」を追加
    <br>「path」をダブルクリックし、「新規」作成　「%JAVA_HOME%¥bin」を追加
    <br>コマンドプロンプトで[java Ready01]を実行。入力されたものが出てくる！

    <p class="title2">Eclipse</p>
    <p class="text">Eclipseとはオープンソースの統合開発環境のこと。プログラマーの負担を減らしてくれる！
    <br>実際に使ってみるとコンパイルする必要がなくなる！
    </p>

    <p class="title2">Eclipseでプログラムの実行</p>
    <p class="text">プロジェクトの作成（Javaのアプリケーションを作成するときの単位）
    <br>ソースファイルの作成
    <br>public class Ready02 {
    <br>public static void main(String[] args) {
    <br>    System.out.println("Hello World!");
<br>    }
<br>}
<br>
これでHello World!が表示される。
<br>""の間に入れる単語が表示されるところ</p>

<p class="title2">Javaの基本文法</p>
<p class="text">波カッコ（{}）で囲まれたプログラムの塊が<strong>ブロック</strong>と
<br>セミコロン（;）で終わる<strong>文</strong>で構成されている。
<br><br>ブロック・・・①メソッドブロック＝処理を記述するメソッド　②クラスブロック＝メソッドをまとめるクラス
<br></p>
<br>
<p class="text">
  コーティング規約・・・ソースコードの書き方を定めたルールのこと
  <br>
      <br>public class Ready02 {　・・・クラスブロックの始まり
    <br>public static void main(String[] args) {　・・・メソッドブロックの始まり
    <br>    System.out.println("Hello World!");　・・・文字列を出力する処理
<br>    }　・・・メソッドブロックの終わり
<br>}　・・・クラスブロックの終わり

<br><br><br><br>
<p class="text">
  mainメソッド・・・プログラムを実行するときに最初に呼び出されるメソッド。２通りある
  <br>
  ①public static void main(String[] args) {
<br>　　 // 処理（文）
<br>}
<br><br>
②public static void main(String... args) {
<br>    // 処理（文）
<br>}
<br>
<p class="text">
<br>  　System.out.println("Hello WEBCAMP!");
<br>　　System.out.println("Hello Java!");
<br>を連続で入れれば、出力される。
</p>
</p>
</p>

<p class="title2">変数について</p>
<p class="text">変数・・・データ（値）を格納するために準備する名前付きの箱。
変数の役割・・・格納したデータを取り出して使用すること。使用することで複雑なデータや複数のデータを簡単に取り出すこともできる。</p>
<p class="text">変数の宣言・・・型　変数名;
<br>初期化・・・宣言した変数に初期値を代入すること。型　変数名 = 代入するデータ;
<br>
public class Variable01 {
<br>
<br>    public static void main(String[] args) {
<br>        int num1;  // int型の変数num1を宣言
<br>        String str1;  // String型の変数str1を宣言
<br>        num1 = 10;  // num1を初期化
<br>        str1 = "Hello World!";  //str1を初期化
<br>        System.out.println(num1);
<br>        System.out.println(str1);
<br>
<br>        num1 = 20;  // num1に20を再代入
<br>        System.out.println(num1);
<br>
<br>        int num2 = 30;  // int型の変数num2を宣言と同時に初期化
<br>        System.out.println(num2);
<br>    }
}</p>
<p class="text">定数・・・最初に代入した値を後から変更ができない変数のこと。
<br>定数の基本構文・・・final 定数の型 定数名 = 初期値;</p>

<p class="title2">型の基本</p>
<p class="text">①プリミティブ型・・・数値や文字のデータそのものを保持している型
<br>8種類あり、long,int,short,byte,double,float,boolean,char</p>
<p class="text">整数型・・・通常はintを使う、大きい値を使う場合はlongを使う
<br> 浮動小数型・・・通常はdoubleを使う、値によってはfloatを使う
<br>倫理型・・・booleanのみ。格納できる値はfalseかtrueのみ。
<br>文字型・・・charのみ。</p>
<br><br><br>
<p class="text">②参照型・・・データそのものを扱うのではなく、データがある参照先を保持する型
<br>null　＝　参照型変数の中身が何もないことを表現する特別な値</p>


  </body>
</html>